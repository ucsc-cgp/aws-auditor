import csv
import os


class Bill:
    """A class for managing aws-cost-allocation bills."""
    def __init__(self, sources):
        """
        Create a new bill from a given source.

        :param sources: A path to a .csv, a Bill or a list of Bill objects to be merged.
        """
        self.data = list()
        self.field_names = ''

        if isinstance(sources, str):
            self.importCSV(sources)
        elif isinstance(sources, Bill):
            self.merge(sources)
        elif isinstance(sources, list):
            for bill in sources:
                self.merge(bill)

    def filter(self, usernames, services, accounts, max, min=0.0):
        """
        Create a new Bill object that only includes specific entries.

        :param usernames: The usernames to be included in the new Bill. (As specified by the 'user:Owner' entry in the .csv)
        :param services: The services to be included in the new Bill. (As specified by the 'ProductCode' entry in the .csv)
        :param accounts: The accounts to be included in the new Bill. (As specified by the 'LinkedAccounts' entry in the .csv)
        :param max: The maximum cost to be included in the new Bill. (As specified by the 'TotalCost' entry in the .csv)
        :param min: The minimum cost to be included in the new Bill. (As specified by the 'TotalCost' entry in the .csv)
        :return: A new Bill object that contains entries from this instances that match given criteria.
        """
        pass

    def merge(self, other_bills):
        """
        Merge this bill with other bills
        :param other_bills: A list of other Bill objects.
        """
        pass

    def export(self, path):
        """
        Exports the data contained in this Bill to a .csv

        All of the entries in the bill generated by AWS are surrounded by "". These must be added to

        :param path: The location where the .csv will be exported to.
        """
        with open(path, 'w') as f:
            f.write(','.join(self.field_names) + '\n')
            for row in self.data:
                line = ','.join(['"{}"'.format(v) for v in row.values()])
                f.write(line + '\n')

    def importCSV(self, path):
        """
        Overwrite currently stored data with data from a .csv
        :param path: The path to the source .csv
        """
        with open(path, 'r') as f:
            first_line = f.readline()

            if first_line.startswith('Don\'t see your'):  # AWS generated bills have a message in them, throw it away.
                reader = csv.DictReader(f)
            else:
                line = f.readline().rstrip('\n')
                self.field_names = line.split(',')
                reader = csv.DictReader(f, self.field_names)

            for row in reader:
                self.data.append(row)
